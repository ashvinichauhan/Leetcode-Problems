// (Amazon/Adobe/Intuit/Uber)

import java.util.*;

class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;
        
        // Initialize the queue with all initially rotten oranges and count fresh oranges
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 2) {
                    queue.add(new int[]{r, c});
                } else if (grid[r][c] == 1) {
                    freshOranges++;
                }
            }
        }
        
        // If there are no fresh oranges, return 0 (no time needed)
        if (freshOranges == 0) return 0;
        
        // Directions array for 4-directional movement (up, down, left, right)
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        int minutes = 0;
        
        // BFS to rot adjacent fresh oranges
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean rottenThisMinute = false;
            
            for (int i = 0; i < size; i++) {
                int[] current = queue.poll();
                int row = current[0];
                int col = current[1];
                
                for (int[] direction : directions) {
                    int newRow = row + direction[0];
                    int newCol = col + direction[1];
                    
                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                        grid[newRow][newCol] = 2;  // Mark orange as rotten
                        queue.add(new int[]{newRow, newCol});
                        freshOranges--;
                        rottenThisMinute = true;
                    }
                }
            }
            
            if (rottenThisMinute) {
                minutes++;
            }
        }
        
        // If there are still fresh oranges left, return -1
        return freshOranges == 0 ? minutes : -1;
    }
}
